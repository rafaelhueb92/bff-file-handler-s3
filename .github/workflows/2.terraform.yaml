name: Deploy Terraform Infrastructure

on:
  workflow_run:
    workflows: ["Build"]       
    types:
      - completed

jobs:
  terraform:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    
    env:
      AWS_REGION: us-east-1
      TF_WORKSPACE: development
    
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check Docker Version
        run: docker --version
      
      - name: Read destroy.yaml and check if destroy=true
        id: check_destroy
        run: |
          DESTROY=$(grep 'destroy:' ./terraform/destroy.yaml | awk '{print $2}')
          if [[ "$DESTROY" == "true" ]]; then
            echo "Destroy triggered"
            echo "destroy_triggered=true" >> $GITHUB_ENV
            echo "destroy_triggered=true" >> $GITHUB_OUTPUT
          else
            echo "destroy_triggered=false" >> $GITHUB_ENV
            echo "destroy_triggered=false" >> $GITHUB_OUTPUT
          fi

      - name: Parse config.yaml and Set Environment Variables
        run: |
          PROJECT_NAME=$(grep 'project:' ../config.yaml | awk '{print $2}')

          echo "REPOSITORY_NAME=$REPOSITORY_NAME" >> $GITHUB_ENV
          echo "TF_VAR_project_name=$PROJECT_NAME" >> $GITHUB_ENV
          
          echo "TF_VAR_app_user=${{ secrets.APP_USER }}" >> $GITHUB_ENV
          echo "TF_VAR_app_password=${{ secrets.APP_PASSWORD }}" >> $GITHUB_ENV
     
      - name: Create Backend State
        run: bash backend-create.sh
        working-directory: ./terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Terraform Format
        working-directory: ./terraform
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          if [ "${{ env.destroy_triggered }}" == "true" ]; then
            terraform plan -destroy -out=tfplan
          else
            terraform plan -out=tfplan
          fi
        env:
          TF_VAR_ecr_image_tag: ${{ env.IMAGE_TAG }}
          TF_VAR_app_user: ${{ secrets.APP_USER }}
          TF_VAR_app_password: ${{ secrets.APP_PASSWORD }}

      - name: Terraform Apply/Destroy
        working-directory: ./terraform
        run: |
          if [ "${{ env.destroy_triggered }}" == "true" ]; then
            terraform destroy --auto-approve
          else
            terraform apply --auto-approve tfplan
          fi
        env:
          TF_VAR_app_user: ${{ secrets.APP_USER }}
          TF_VAR_app_password: ${{ secrets.APP_PASSWORD }}