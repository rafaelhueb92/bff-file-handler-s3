# Stage 1: Dependencies
FROM node:18-alpine AS dependencies
WORKDIR /usr/src/app
# Copy only package files to leverage cache
COPY app/package*.json ./
# Use --frozen-lockfile instead of --only=production for better reliability
RUN npm ci --frozen-lockfile --production

# Stage 2: Builder
FROM node:18-alpine AS builder
WORKDIR /usr/src/app
# Copy package files first to leverage cache
COPY app/package*.json ./
# Install all dependencies (including devDependencies)
RUN npm ci --frozen-lockfile
# Then copy source files
COPY app/ .
# Build the application
RUN npm run build

# Stage 3: Production
FROM node:18-alpine AS production
WORKDIR /usr/src/app

# Add labels at the beginning for better caching
LABEL org.opencontainers.image.version="1.0.0" \
    org.opencontainers.image.authors="Rafael Hueb" \
    org.opencontainers.image.description="BFF File Handler Service"

# Combine RUN commands to reduce layers
RUN apk add --no-cache curl tini \
    && addgroup -g 1001 -S nodejs \
    && adduser -S nestjs -u 1001 \
    && chown -R nestjs:nodejs /usr/src/app

# Copy only necessary files from builder
COPY --from=builder --chown=nestjs:nodejs /usr/src/app/dist ./dist
COPY --from=dependencies --chown=nestjs:nodejs /usr/src/app/node_modules ./node_modules
COPY --chown=nestjs:nodejs app/package*.json ./

# Set environment variables
ENV NODE_ENV=production \
    PORT=3000

# Configure healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=30s \
    CMD curl -f http://localhost:${PORT}/health/check || exit 1

# Set user
USER nestjs

# Use tini as entrypoint
ENTRYPOINT ["/sbin/tini", "--"]

# Set command
CMD ["node", "dist/main"]

# Expose port
EXPOSE ${PORT}